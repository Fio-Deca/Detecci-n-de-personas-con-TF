# -*- coding: utf-8 -*-
"""json-tfrecord.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_2LSllGZZYUCdLEW-xBX2VEK1M6Rcyfi
"""

#importamos las librerías necesarias
import json 
import pickle 
import zipfile 
import pandas as pd
!pip install tf_slim

#Descomprimimos el dataset original 
local_zip = "/content/Dataset-personas.zip"
zip_ref = zipfile.ZipFile(local_zip,"r")
zip_ref.extractall("dataset_original")
zip_ref.close()

#Cargamos el archivo json
type_file = "test"
path = "/content/Deteccion_de_personas_TEST.json"
data_file = open(path)
data = json.load(data_file)

data

csv_list = []
"""Bucle for que recorrerá todas las imágenes y recogerá tanto tamaño (altura y 
anchura) como el nombre""" 
for classification in data:
  width,height = classification['width'], classification['height']
  image = classification['image']
  #Bucle For que recoge el nombre de la etiqueta y su posición
  for item in classification['tags']:
    name = item['name']
    xmin = item['pos']['x']
    ymin = item['pos']['y']
    xmax = item['pos']['x'] + item['pos']['w']
    ymax = item['pos']['y'] + item['pos']['h']

    '''
    Los datos recogidos serán guardados en una variable para después ir al 
    archivo CSV 
    ''' 

    value = (image,width,height,name,xmin,ymin,xmax,ymax)
    csv_list.append(value)

column_name = ['filename','width','height','class','xmin','ymin','xmax','ymax']
csv_df = pd.DataFrame(csv_list, columns = column_name)

csv_df.to_csv("/content/{}_labels.csv".format(type_file))

# Commented out IPython magic to ensure Python compatibility.
#Proceso de instalación de la librería object detection
import os
# %cd /content
!git clone --quiet https://github.com/tensorflow/models.git
# %cd /content/models/
!git checkout 58d19c67e1d30d905dd5c6e5092348658fed80af
!apt-get update && apt-get install -y -qq protobuf-compiler python-pil python-lxml python-tk
!pip install -q Cython contextlib2 pillow lxml matplotlib
!pip install -q pycocotools
# %cd /content/models/research
!protoc object_detection/protos/*.proto --python_out=.
os.environ['PYTHONPATH'] += ':/content/models/research/:/content/models/research/slim/'
!python object_detection/builders/model_builder_test.py

#Trozo de codigo sacado de la documentación oficial de tensowflow 
"""
Usage:

# Create train data:
python generate_tfrecord.py --label=<LABEL> --csv_input=<PATH_TO_ANNOTATIONS_FOLDER>/train_labels.csv  --output_path=<PATH_TO_ANNOTATIONS_FOLDER>/train.record

# Create test data:
python generate_tfrecord.py --label=<LABEL> --csv_input=<PATH_TO_ANNOTATIONS_FOLDER>/test_labels.csv  --output_path=<PATH_TO_ANNOTATIONS_FOLDER>/test.record
"""

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import

import os
import io
import pandas as pd
import tensorflow as tf
import sys
sys.path.append("../../models/research")

from PIL import Image
from object_detection.utils import dataset_util
from collections import namedtuple, OrderedDict



"""Aquí ponemos el nombre de las etiquetas en este caso solo hay una que es 
  persona"""
def class_text_to_int(row_label):
    if row_label == "Personas":  # 'ship':
        return 1
    else: 
      None


def split(df, group):
    data = namedtuple('data', ['filename', 'object'])
    gb = df.groupby(group)
    return [data(filename, gb.get_group(x)) for filename, x in zip(gb.groups.keys(), gb.groups)]


def create_tf_example(group, path):
    with tf.io.gfile.GFile(os.path.join(path, '{}'.format(group.filename)), 'rb') as fid:
        encoded_jpg = fid.read()
    encoded_jpg_io = io.BytesIO(encoded_jpg)
    image = Image.open(encoded_jpg_io)
    width, height = image.size

    filename = group.filename.encode('utf8')
    image_format = b'jpg'
    # check if the image format is matching with your images.
    xmins = []
    xmaxs = []
    ymins = []
    ymaxs = []
    classes_text = []
    classes = []

    for index, row in group.object.iterrows():
        xmins.append(row['xmin'] / width)
        xmaxs.append(row['xmax'] / width)
        ymins.append(row['ymin'] / height)
        ymaxs.append(row['ymax'] / height)
        classes_text.append(row['class'].encode('utf8'))
        classes.append(class_text_to_int(row['class']))

    tf_example = tf.train.Example(features=tf.train.Features(feature={
        'image/height': dataset_util.int64_feature(height),
        'image/width': dataset_util.int64_feature(width),
        'image/filename': dataset_util.bytes_feature(filename),
        'image/source_id': dataset_util.bytes_feature(filename),
        'image/encoded': dataset_util.bytes_feature(encoded_jpg),
        'image/format': dataset_util.bytes_feature(image_format),
        'image/object/bbox/xmin': dataset_util.float_list_feature(xmins),
        'image/object/bbox/xmax': dataset_util.float_list_feature(xmaxs),
        'image/object/bbox/ymin': dataset_util.float_list_feature(ymins),
        'image/object/bbox/ymax': dataset_util.float_list_feature(ymaxs),
        'image/object/class/text': dataset_util.bytes_list_feature(classes_text),
        'image/object/class/label': dataset_util.int64_list_feature(classes),
    }))
    return tf_example
#ponemos el nombre que tendrá el archivo
output_path = "test.record"
#ponemos la ruta de donde sacara las imagenes
image_dir = "/content/dataset_original/human_detection_dataset/1"
#ruta del archivo csv final
csv_input = "/content/test_labels.csv"

writer = tf.io.TFRecordWriter(output_path)
path = os.path.join(image_dir)
examples = pd.read_csv(csv_input)
grouped = split(examples, 'filename')
for group in grouped:
     tf_example = create_tf_example(group, path)
     writer.write(tf_example.SerializeToString())

writer.close()
output_path = os.path.join(os.getcwd(),output_path)
print('Successfully created the TFRecords: {}'.format(output_path))

